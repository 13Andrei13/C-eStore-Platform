Am  implementat mai multe functii de tip contructori, get-ere si set-ere si operatori de tip egal = , == sau !=. In functiile de get am returnat ce a fost nevoie, in functiile de set am modificat ce a fost nevoie. In mare nu prea sunt multe explicatii de oferit la aceasta cerinta.

Am  implementat clasa Server in care am avut de realizat niste functii de tip get in care returnam ce era nevoie si o functie de tip set set__UserID__ProductsCart__() in care a trebuit sa parcurg toti userii si sa setez produsele din cos pentru fiecare user.

Am trebuit sa realizat o lista cu produsele care era espressor si erau si reduse. Astfel, mi-am initializat o lista de tipul Product pe care am numit-o EspressorDiscounted. Am parcurs lista de Produse din server si in monetul in care categoria produsului era espressor si tipul produsului era DiscountedProduct, l-am introdus in lista initializata mai sus. 

Am facut o lista cu userii care erau de tip Basic User si costul transportului mai mic de 11.5. Astfel, am initiazat o lista pe care am numit-o NonPremiumUser. Am trecut prin toata lista de Users din lista si in momentul in care gaseam un user al carui tip era BasicUser si trasportul sau era mai mic sau egal cu 11.5, il bagam in lista initializata mai sus.

Am facut o lista cu produsele resigilate si mai mult decat atat, motivul pentru care a fost returnat. Astfel, am initializat o lista cu numele Returned_lipsa_accesorii. Am parcurs lista de produse si in momentul in care gaseam produse a caror tip era ResealedProduct si motivul pentru care sunt resigilate este lipsa_accesorii, le bagam in lista initializata mai sus. Mai mult decat atat, in enunt a trebuit sa le si ordonez crescator dupa pret. Astfel, in Utility am facut o functie FoodProductCompareNTP de tip bool astfel incat sa imi creez o regula pentru ordonare. Dupa m-am intors in fuctia QuerySolver si am ordonat lista cu ajutorul functiei sort, dand ca parametru functia mea de tip bool facuta mai sus.

Am facut o lista cu produsele de mancare. Astfel, am trecut prin toata lista de produse din server si am bagat produsele a carui tip sunt "FoodProduct" in lista creata cu numele Produse_Alimentare. Dupa acest lucru a trebuit sa le ordonez dupa nume, dupa tara de origine si apoi dupa pretul pe kg. Astfel am creat o functie de tip bool FoodProductCOmpareNTP, in care verificam daca mele a doua produse se afla in ordinea corecta. Daca da, verificam dupa tara de origine si dupa , verificam pretul pe kg. M-am intors in QuerrySolver si am ordonat cu ajutorul functiei sort, dand ca parametru functia mea de ordonare pe care am creat-o mai sus.

In prima faza mi-am creat o mapa de orase in care pe primul loc in mapa bagam orasul si pe locul 2 bagam cati utilizatori sunt din acel oras. Dupa acest lucru, am ordonat mapa dupa valoarea de tip int astfel iincat in harta sa am orasele in functie de numarul de utilizatori. Dupa acest lucru, am trecut din nou prin lista de useri astfel incat sa caut ce utilizatori stau in orasul unde se gasesc cei mai multi utilizatori. Desigur, pe acest user a trebuit sa fac mai multe verificari, cum ar fi sa vad daca locul de facturare este acelasi cu orasul de livrare, dupa sa vad daca acest oras are cei mai multi utilizatori dupa cum dicta mapa. Dupa aceasta verificare a trebuit sa verific daca sta la casa, astfel a trebuit sa verific daca in campul bloc avem liniuta, atat la DeliveryData cat si la BillingData si daca avem in campul apartament 0 , atat la DeliveryData cat si la BillingData. Daca acest lucru era indeplinit, il bagam in lista mea de utilizatori speciali. Dupa acest lucru am ordonat lista dupa ID si am returnat-o.

Mi-am creat o mapa numita filter in care sa retin toate produsele de tip telefon sau imprimanta si cu tot cu id ul lor pentru ca dupa sa trec prin lista de useri si sa vad daca acestia au reducere la aceste produse. Astfel am trecut prin toata lista de produse si am retinut produsele intr-o mapa cu tot cu id-ul lor, iar dupa acest lucru am trecut prin lista de useri, am verificat daca sunt Premium user, iar daca erau Premium User, extrageam mapa de discounturi pe care o avea acel utilizator, si verificam fiecare produl care avea reducere daca era telefon sau imprimanta, adica puneam mana pe un produs cu reducere, si cautam id-ul acestuia in mapa de telefoane si imprimante, cu functia find. Daca se afla in mapa de produse cu telefoane si imprimante, inseamna ca aceasta avea reducere la telefoane si imprimante, si bagam userul in lista mea de premium_speciali.


Pentru a realiza LRUCache.cpp, am facut getterele si setterele din aceasta clasa si dupa m-am ocupat de functia processRequests() in care am trecut prin toate requesturile, daca nu il gaseam in LRU si desigur daca LRU era plin, scoteam ultimul element, iar daca il gaseam , il eliminam din vector, pentru la final sa il inserez in fata.
Cerinta 5

Am facut prima oara functiile din ShoppingCart, functia de getQuantity, functia de addProduct in care am adaugat un Product , raiseQuantity in care am crescut cantitatea doar daca cantitatea era un numar pozitiv, lowerQuantity in care am scazut cantitatea doar daca cantitatea pe care voiam sa o scad era negativa, si functia deleteProduct in care am sters un Product cu functia erase.
Dupa acest lucru m-am dus in Product.cpp si am realizat urmatoarele functii:
-checkQuantity() - in care am returnat true daca aveam cantitatea ceruta sau false daca nu am cantitatea necesara
-decraseQuantity() -  in aceasta functie scad cantitatea pe care am primit-o ca parametru
-increaseQuantity()-  in aceasta functie cresc cantitatea pe care am primit-o ca parametru
Dupa toate acestea, m-am ocupat de functiile requestAddProduct() si requestDeleteProduct():
-requestAddProduct()- verificam in prima faza daca cantitatea introdusa este una corecta, dupa acest lucru mergeam prin produse si puneam pana pe produsul care era introdus ca parametru, dupa aceasta verificam daca am un produs, daca exista cantitate, dupa acest lucru puneam mana pe ProdusCart-ul userului la care voiam sa lucrez, dupa ce ii gaseam cosul de cumparaturi, dadeam decrease la cantitatea produsului pe care voiam sa il adaug, dupa aceasta am vrut sa vad daca produsul se afla deja in cosul de cumparaturi, daca se afla ii dadeam raise la cantitate daca nu ii dadeam add
-requestAddProduct verificam daca cantitatea introdusa era corecta, dupa aceasta am cautat cosul de cumparaturi al userului. Dupa ce am pus mana pe cosul de cumparaturi, am verificat daca cantitatea din cosul de cumparaturi exista in cos, dupa aceasta daca cantitatea pe care voiam sa o sterg era egala cu cantitatea care se afla in cos, ii dadeam delete la produs, daca nu ii dadeam lower la cantitate.

